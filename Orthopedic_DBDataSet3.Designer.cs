//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Clinical {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("Orthopedic_DBDataSet3")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Orthopedic_DBDataSet3 : global::System.Data.DataSet {
        
        private patientmedicalinfoDataTable tablepatientmedicalinfo;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public Orthopedic_DBDataSet3() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected Orthopedic_DBDataSet3(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["patientmedicalinfo"] != null)) {
                    base.Tables.Add(new patientmedicalinfoDataTable(ds.Tables["patientmedicalinfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public patientmedicalinfoDataTable patientmedicalinfo {
            get {
                return this.tablepatientmedicalinfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            Orthopedic_DBDataSet3 cln = ((Orthopedic_DBDataSet3)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["patientmedicalinfo"] != null)) {
                    base.Tables.Add(new patientmedicalinfoDataTable(ds.Tables["patientmedicalinfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tablepatientmedicalinfo = ((patientmedicalinfoDataTable)(base.Tables["patientmedicalinfo"]));
            if ((initTable == true)) {
                if ((this.tablepatientmedicalinfo != null)) {
                    this.tablepatientmedicalinfo.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitClass() {
            this.DataSetName = "Orthopedic_DBDataSet3";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Orthopedic_DBDataSet3.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablepatientmedicalinfo = new patientmedicalinfoDataTable();
            base.Tables.Add(this.tablepatientmedicalinfo);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializepatientmedicalinfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            Orthopedic_DBDataSet3 ds = new Orthopedic_DBDataSet3();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void patientmedicalinfoRowChangeEventHandler(object sender, patientmedicalinfoRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class patientmedicalinfoDataTable : global::System.Data.TypedTableBase<patientmedicalinfoRow> {
            
            private global::System.Data.DataColumn columnpid;
            
            private global::System.Data.DataColumn columnage;
            
            private global::System.Data.DataColumn columnbloodtype;
            
            private global::System.Data.DataColumn columnbloodpressure;
            
            private global::System.Data.DataColumn columnvitaminD;
            
            private global::System.Data.DataColumn columnAnemia;
            
            private global::System.Data.DataColumn columnbodytemp;
            
            private global::System.Data.DataColumn columninsulin;
            
            private global::System.Data.DataColumn columnadditionalinfo;
            
            private global::System.Data.DataColumn columndid_a_surgery;
            
            private global::System.Data.DataColumn columnallergic_to_any_medicine;
            
            private global::System.Data.DataColumn columnbreathingdisorder;
            
            private global::System.Data.DataColumn columntaking_any_medicie;
            
            private global::System.Data.DataColumn columnvisit_orthopedic;
            
            private global::System.Data.DataColumn columnAsthma;
            
            private global::System.Data.DataColumn columncholesterol;
            
            private global::System.Data.DataColumn columnbloodglucose;
            
            private global::System.Data.DataColumn columnXray;
            
            private global::System.Data.DataColumn columnlabresults;
            
            private global::System.Data.DataColumn columnnational_id;
            
            private global::System.Data.DataColumn columnpatientname;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public patientmedicalinfoDataTable() {
                this.TableName = "patientmedicalinfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal patientmedicalinfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected patientmedicalinfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn pidColumn {
                get {
                    return this.columnpid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ageColumn {
                get {
                    return this.columnage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn bloodtypeColumn {
                get {
                    return this.columnbloodtype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn bloodpressureColumn {
                get {
                    return this.columnbloodpressure;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn vitaminDColumn {
                get {
                    return this.columnvitaminD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn AnemiaColumn {
                get {
                    return this.columnAnemia;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn bodytempColumn {
                get {
                    return this.columnbodytemp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn insulinColumn {
                get {
                    return this.columninsulin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn additionalinfoColumn {
                get {
                    return this.columnadditionalinfo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn did_a_surgeryColumn {
                get {
                    return this.columndid_a_surgery;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn allergic_to_any_medicineColumn {
                get {
                    return this.columnallergic_to_any_medicine;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn breathingdisorderColumn {
                get {
                    return this.columnbreathingdisorder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn taking_any_medicieColumn {
                get {
                    return this.columntaking_any_medicie;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn visit_orthopedicColumn {
                get {
                    return this.columnvisit_orthopedic;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn AsthmaColumn {
                get {
                    return this.columnAsthma;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn cholesterolColumn {
                get {
                    return this.columncholesterol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn bloodglucoseColumn {
                get {
                    return this.columnbloodglucose;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn XrayColumn {
                get {
                    return this.columnXray;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn labresultsColumn {
                get {
                    return this.columnlabresults;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn national_idColumn {
                get {
                    return this.columnnational_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn patientnameColumn {
                get {
                    return this.columnpatientname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public patientmedicalinfoRow this[int index] {
                get {
                    return ((patientmedicalinfoRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event patientmedicalinfoRowChangeEventHandler patientmedicalinfoRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event patientmedicalinfoRowChangeEventHandler patientmedicalinfoRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event patientmedicalinfoRowChangeEventHandler patientmedicalinfoRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event patientmedicalinfoRowChangeEventHandler patientmedicalinfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddpatientmedicalinfoRow(patientmedicalinfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public patientmedicalinfoRow AddpatientmedicalinfoRow(
                        int age, 
                        string bloodtype, 
                        string bloodpressure, 
                        double vitaminD, 
                        double Anemia, 
                        double bodytemp, 
                        double insulin, 
                        string additionalinfo, 
                        string did_a_surgery, 
                        string allergic_to_any_medicine, 
                        string breathingdisorder, 
                        string taking_any_medicie, 
                        string visit_orthopedic, 
                        string Asthma, 
                        string cholesterol, 
                        string bloodglucose, 
                        byte[] Xray, 
                        byte[] labresults, 
                        int national_id, 
                        string patientname) {
                patientmedicalinfoRow rowpatientmedicalinfoRow = ((patientmedicalinfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        age,
                        bloodtype,
                        bloodpressure,
                        vitaminD,
                        Anemia,
                        bodytemp,
                        insulin,
                        additionalinfo,
                        did_a_surgery,
                        allergic_to_any_medicine,
                        breathingdisorder,
                        taking_any_medicie,
                        visit_orthopedic,
                        Asthma,
                        cholesterol,
                        bloodglucose,
                        Xray,
                        labresults,
                        national_id,
                        patientname};
                rowpatientmedicalinfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowpatientmedicalinfoRow);
                return rowpatientmedicalinfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public patientmedicalinfoRow FindBypid(int pid) {
                return ((patientmedicalinfoRow)(this.Rows.Find(new object[] {
                            pid})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                patientmedicalinfoDataTable cln = ((patientmedicalinfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new patientmedicalinfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnpid = base.Columns["pid"];
                this.columnage = base.Columns["age"];
                this.columnbloodtype = base.Columns["bloodtype"];
                this.columnbloodpressure = base.Columns["bloodpressure"];
                this.columnvitaminD = base.Columns["vitaminD"];
                this.columnAnemia = base.Columns["Anemia"];
                this.columnbodytemp = base.Columns["bodytemp"];
                this.columninsulin = base.Columns["insulin"];
                this.columnadditionalinfo = base.Columns["additionalinfo"];
                this.columndid_a_surgery = base.Columns["did_a_surgery"];
                this.columnallergic_to_any_medicine = base.Columns["allergic_to_any_medicine"];
                this.columnbreathingdisorder = base.Columns["breathingdisorder"];
                this.columntaking_any_medicie = base.Columns["taking_any_medicie"];
                this.columnvisit_orthopedic = base.Columns["visit_orthopedic"];
                this.columnAsthma = base.Columns["Asthma"];
                this.columncholesterol = base.Columns["cholesterol"];
                this.columnbloodglucose = base.Columns["bloodglucose"];
                this.columnXray = base.Columns["Xray"];
                this.columnlabresults = base.Columns["labresults"];
                this.columnnational_id = base.Columns["national_id"];
                this.columnpatientname = base.Columns["patientname"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnpid = new global::System.Data.DataColumn("pid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpid);
                this.columnage = new global::System.Data.DataColumn("age", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnage);
                this.columnbloodtype = new global::System.Data.DataColumn("bloodtype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbloodtype);
                this.columnbloodpressure = new global::System.Data.DataColumn("bloodpressure", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbloodpressure);
                this.columnvitaminD = new global::System.Data.DataColumn("vitaminD", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnvitaminD);
                this.columnAnemia = new global::System.Data.DataColumn("Anemia", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAnemia);
                this.columnbodytemp = new global::System.Data.DataColumn("bodytemp", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbodytemp);
                this.columninsulin = new global::System.Data.DataColumn("insulin", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninsulin);
                this.columnadditionalinfo = new global::System.Data.DataColumn("additionalinfo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnadditionalinfo);
                this.columndid_a_surgery = new global::System.Data.DataColumn("did_a_surgery", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndid_a_surgery);
                this.columnallergic_to_any_medicine = new global::System.Data.DataColumn("allergic_to_any_medicine", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnallergic_to_any_medicine);
                this.columnbreathingdisorder = new global::System.Data.DataColumn("breathingdisorder", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbreathingdisorder);
                this.columntaking_any_medicie = new global::System.Data.DataColumn("taking_any_medicie", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntaking_any_medicie);
                this.columnvisit_orthopedic = new global::System.Data.DataColumn("visit_orthopedic", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnvisit_orthopedic);
                this.columnAsthma = new global::System.Data.DataColumn("Asthma", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAsthma);
                this.columncholesterol = new global::System.Data.DataColumn("cholesterol", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncholesterol);
                this.columnbloodglucose = new global::System.Data.DataColumn("bloodglucose", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbloodglucose);
                this.columnXray = new global::System.Data.DataColumn("Xray", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnXray);
                this.columnlabresults = new global::System.Data.DataColumn("labresults", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlabresults);
                this.columnnational_id = new global::System.Data.DataColumn("national_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnational_id);
                this.columnpatientname = new global::System.Data.DataColumn("patientname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpatientname);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnpid}, true));
                this.columnpid.AutoIncrement = true;
                this.columnpid.AutoIncrementSeed = -1;
                this.columnpid.AutoIncrementStep = -1;
                this.columnpid.AllowDBNull = false;
                this.columnpid.ReadOnly = true;
                this.columnpid.Unique = true;
                this.columnage.AllowDBNull = false;
                this.columnbloodtype.AllowDBNull = false;
                this.columnbloodtype.MaxLength = 50;
                this.columnbloodpressure.AllowDBNull = false;
                this.columnbloodpressure.MaxLength = 50;
                this.columnvitaminD.AllowDBNull = false;
                this.columnAnemia.AllowDBNull = false;
                this.columnbodytemp.AllowDBNull = false;
                this.columninsulin.AllowDBNull = false;
                this.columnadditionalinfo.MaxLength = 200;
                this.columndid_a_surgery.AllowDBNull = false;
                this.columndid_a_surgery.MaxLength = 50;
                this.columnallergic_to_any_medicine.AllowDBNull = false;
                this.columnallergic_to_any_medicine.MaxLength = 50;
                this.columnbreathingdisorder.AllowDBNull = false;
                this.columnbreathingdisorder.MaxLength = 50;
                this.columntaking_any_medicie.AllowDBNull = false;
                this.columntaking_any_medicie.MaxLength = 50;
                this.columnvisit_orthopedic.AllowDBNull = false;
                this.columnvisit_orthopedic.MaxLength = 50;
                this.columnAsthma.AllowDBNull = false;
                this.columnAsthma.MaxLength = 50;
                this.columncholesterol.AllowDBNull = false;
                this.columncholesterol.MaxLength = 50;
                this.columnbloodglucose.AllowDBNull = false;
                this.columnbloodglucose.MaxLength = 50;
                this.columnnational_id.AllowDBNull = false;
                this.columnpatientname.AllowDBNull = false;
                this.columnpatientname.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public patientmedicalinfoRow NewpatientmedicalinfoRow() {
                return ((patientmedicalinfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new patientmedicalinfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(patientmedicalinfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.patientmedicalinfoRowChanged != null)) {
                    this.patientmedicalinfoRowChanged(this, new patientmedicalinfoRowChangeEvent(((patientmedicalinfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.patientmedicalinfoRowChanging != null)) {
                    this.patientmedicalinfoRowChanging(this, new patientmedicalinfoRowChangeEvent(((patientmedicalinfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.patientmedicalinfoRowDeleted != null)) {
                    this.patientmedicalinfoRowDeleted(this, new patientmedicalinfoRowChangeEvent(((patientmedicalinfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.patientmedicalinfoRowDeleting != null)) {
                    this.patientmedicalinfoRowDeleting(this, new patientmedicalinfoRowChangeEvent(((patientmedicalinfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemovepatientmedicalinfoRow(patientmedicalinfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Orthopedic_DBDataSet3 ds = new Orthopedic_DBDataSet3();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "patientmedicalinfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class patientmedicalinfoRow : global::System.Data.DataRow {
            
            private patientmedicalinfoDataTable tablepatientmedicalinfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal patientmedicalinfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablepatientmedicalinfo = ((patientmedicalinfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int pid {
                get {
                    return ((int)(this[this.tablepatientmedicalinfo.pidColumn]));
                }
                set {
                    this[this.tablepatientmedicalinfo.pidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int age {
                get {
                    return ((int)(this[this.tablepatientmedicalinfo.ageColumn]));
                }
                set {
                    this[this.tablepatientmedicalinfo.ageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string bloodtype {
                get {
                    return ((string)(this[this.tablepatientmedicalinfo.bloodtypeColumn]));
                }
                set {
                    this[this.tablepatientmedicalinfo.bloodtypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string bloodpressure {
                get {
                    return ((string)(this[this.tablepatientmedicalinfo.bloodpressureColumn]));
                }
                set {
                    this[this.tablepatientmedicalinfo.bloodpressureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double vitaminD {
                get {
                    return ((double)(this[this.tablepatientmedicalinfo.vitaminDColumn]));
                }
                set {
                    this[this.tablepatientmedicalinfo.vitaminDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double Anemia {
                get {
                    return ((double)(this[this.tablepatientmedicalinfo.AnemiaColumn]));
                }
                set {
                    this[this.tablepatientmedicalinfo.AnemiaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double bodytemp {
                get {
                    return ((double)(this[this.tablepatientmedicalinfo.bodytempColumn]));
                }
                set {
                    this[this.tablepatientmedicalinfo.bodytempColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double insulin {
                get {
                    return ((double)(this[this.tablepatientmedicalinfo.insulinColumn]));
                }
                set {
                    this[this.tablepatientmedicalinfo.insulinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string additionalinfo {
                get {
                    try {
                        return ((string)(this[this.tablepatientmedicalinfo.additionalinfoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'additionalinfo\' in table \'patientmedicalinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepatientmedicalinfo.additionalinfoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string did_a_surgery {
                get {
                    return ((string)(this[this.tablepatientmedicalinfo.did_a_surgeryColumn]));
                }
                set {
                    this[this.tablepatientmedicalinfo.did_a_surgeryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string allergic_to_any_medicine {
                get {
                    return ((string)(this[this.tablepatientmedicalinfo.allergic_to_any_medicineColumn]));
                }
                set {
                    this[this.tablepatientmedicalinfo.allergic_to_any_medicineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string breathingdisorder {
                get {
                    return ((string)(this[this.tablepatientmedicalinfo.breathingdisorderColumn]));
                }
                set {
                    this[this.tablepatientmedicalinfo.breathingdisorderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string taking_any_medicie {
                get {
                    return ((string)(this[this.tablepatientmedicalinfo.taking_any_medicieColumn]));
                }
                set {
                    this[this.tablepatientmedicalinfo.taking_any_medicieColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string visit_orthopedic {
                get {
                    return ((string)(this[this.tablepatientmedicalinfo.visit_orthopedicColumn]));
                }
                set {
                    this[this.tablepatientmedicalinfo.visit_orthopedicColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Asthma {
                get {
                    return ((string)(this[this.tablepatientmedicalinfo.AsthmaColumn]));
                }
                set {
                    this[this.tablepatientmedicalinfo.AsthmaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string cholesterol {
                get {
                    return ((string)(this[this.tablepatientmedicalinfo.cholesterolColumn]));
                }
                set {
                    this[this.tablepatientmedicalinfo.cholesterolColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string bloodglucose {
                get {
                    return ((string)(this[this.tablepatientmedicalinfo.bloodglucoseColumn]));
                }
                set {
                    this[this.tablepatientmedicalinfo.bloodglucoseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public byte[] Xray {
                get {
                    try {
                        return ((byte[])(this[this.tablepatientmedicalinfo.XrayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Xray\' in table \'patientmedicalinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepatientmedicalinfo.XrayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public byte[] labresults {
                get {
                    try {
                        return ((byte[])(this[this.tablepatientmedicalinfo.labresultsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'labresults\' in table \'patientmedicalinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepatientmedicalinfo.labresultsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int national_id {
                get {
                    return ((int)(this[this.tablepatientmedicalinfo.national_idColumn]));
                }
                set {
                    this[this.tablepatientmedicalinfo.national_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string patientname {
                get {
                    return ((string)(this[this.tablepatientmedicalinfo.patientnameColumn]));
                }
                set {
                    this[this.tablepatientmedicalinfo.patientnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsadditionalinfoNull() {
                return this.IsNull(this.tablepatientmedicalinfo.additionalinfoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetadditionalinfoNull() {
                this[this.tablepatientmedicalinfo.additionalinfoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsXrayNull() {
                return this.IsNull(this.tablepatientmedicalinfo.XrayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetXrayNull() {
                this[this.tablepatientmedicalinfo.XrayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IslabresultsNull() {
                return this.IsNull(this.tablepatientmedicalinfo.labresultsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetlabresultsNull() {
                this[this.tablepatientmedicalinfo.labresultsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class patientmedicalinfoRowChangeEvent : global::System.EventArgs {
            
            private patientmedicalinfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public patientmedicalinfoRowChangeEvent(patientmedicalinfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public patientmedicalinfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Clinical.Orthopedic_DBDataSet3TableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class patientmedicalinfoTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public patientmedicalinfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "patientmedicalinfo";
            tableMapping.ColumnMappings.Add("pid", "pid");
            tableMapping.ColumnMappings.Add("age", "age");
            tableMapping.ColumnMappings.Add("bloodtype", "bloodtype");
            tableMapping.ColumnMappings.Add("bloodpressure", "bloodpressure");
            tableMapping.ColumnMappings.Add("vitaminD", "vitaminD");
            tableMapping.ColumnMappings.Add("Anemia", "Anemia");
            tableMapping.ColumnMappings.Add("bodytemp", "bodytemp");
            tableMapping.ColumnMappings.Add("insulin", "insulin");
            tableMapping.ColumnMappings.Add("additionalinfo", "additionalinfo");
            tableMapping.ColumnMappings.Add("did_a_surgery", "did_a_surgery");
            tableMapping.ColumnMappings.Add("allergic_to_any_medicine", "allergic_to_any_medicine");
            tableMapping.ColumnMappings.Add("breathingdisorder", "breathingdisorder");
            tableMapping.ColumnMappings.Add("taking_any_medicie", "taking_any_medicie");
            tableMapping.ColumnMappings.Add("visit_orthopedic", "visit_orthopedic");
            tableMapping.ColumnMappings.Add("Asthma", "Asthma");
            tableMapping.ColumnMappings.Add("cholesterol", "cholesterol");
            tableMapping.ColumnMappings.Add("bloodglucose", "bloodglucose");
            tableMapping.ColumnMappings.Add("Xray", "Xray");
            tableMapping.ColumnMappings.Add("labresults", "labresults");
            tableMapping.ColumnMappings.Add("national_id", "national_id");
            tableMapping.ColumnMappings.Add("patientname", "patientname");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[patientmedicalinfo] WHERE (([pid] = @Original_pid) AND ([age] = @Original_age) AND ([bloodtype] = @Original_bloodtype) AND ([bloodpressure] = @Original_bloodpressure) AND ([vitaminD] = @Original_vitaminD) AND ([Anemia] = @Original_Anemia) AND ([bodytemp] = @Original_bodytemp) AND ([insulin] = @Original_insulin) AND ((@IsNull_additionalinfo = 1 AND [additionalinfo] IS NULL) OR ([additionalinfo] = @Original_additionalinfo)) AND ([did_a_surgery] = @Original_did_a_surgery) AND ([allergic_to_any_medicine] = @Original_allergic_to_any_medicine) AND ([breathingdisorder] = @Original_breathingdisorder) AND ([taking_any_medicie] = @Original_taking_any_medicie) AND ([visit_orthopedic] = @Original_visit_orthopedic) AND ([Asthma] = @Original_Asthma) AND ([cholesterol] = @Original_cholesterol) AND ([bloodglucose] = @Original_bloodglucose) AND ([national_id] = @Original_national_id) AND ([patientname] = @Original_patientname))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pid", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_age", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "age", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_bloodtype", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bloodtype", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_bloodpressure", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bloodpressure", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_vitaminD", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "vitaminD", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Anemia", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Anemia", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_bodytemp", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bodytemp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_insulin", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "insulin", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_additionalinfo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "additionalinfo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_additionalinfo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "additionalinfo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_did_a_surgery", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "did_a_surgery", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_allergic_to_any_medicine", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "allergic_to_any_medicine", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_breathingdisorder", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "breathingdisorder", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_taking_any_medicie", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "taking_any_medicie", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_visit_orthopedic", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "visit_orthopedic", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Asthma", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Asthma", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_cholesterol", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cholesterol", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_bloodglucose", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bloodglucose", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_national_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "national_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_patientname", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "patientname", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[patientmedicalinfo] ([age], [bloodtype], [bloodpressure], [vitaminD], [Anemia], [bodytemp], [insulin], [additionalinfo], [did_a_surgery], [allergic_to_any_medicine], [breathingdisorder], [taking_any_medicie], [visit_orthopedic], [Asthma], [cholesterol], [bloodglucose], [Xray], [labresults], [national_id], [patientname]) VALUES (@age, @bloodtype, @bloodpressure, @vitaminD, @Anemia, @bodytemp, @insulin, @additionalinfo, @did_a_surgery, @allergic_to_any_medicine, @breathingdisorder, @taking_any_medicie, @visit_orthopedic, @Asthma, @cholesterol, @bloodglucose, @Xray, @labresults, @national_id, @patientname);
SELECT pid, age, bloodtype, bloodpressure, vitaminD, Anemia, bodytemp, insulin, additionalinfo, did_a_surgery, allergic_to_any_medicine, breathingdisorder, taking_any_medicie, visit_orthopedic, Asthma, cholesterol, bloodglucose, Xray, labresults, national_id, patientname FROM patientmedicalinfo WHERE (pid = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@age", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "age", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bloodtype", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bloodtype", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bloodpressure", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bloodpressure", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@vitaminD", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "vitaminD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Anemia", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Anemia", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bodytemp", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bodytemp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@insulin", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "insulin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@additionalinfo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "additionalinfo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@did_a_surgery", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "did_a_surgery", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@allergic_to_any_medicine", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "allergic_to_any_medicine", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@breathingdisorder", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "breathingdisorder", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@taking_any_medicie", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "taking_any_medicie", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@visit_orthopedic", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "visit_orthopedic", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Asthma", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Asthma", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cholesterol", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cholesterol", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bloodglucose", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bloodglucose", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Xray", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Xray", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@labresults", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "labresults", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@national_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "national_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@patientname", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "patientname", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[patientmedicalinfo] SET [age] = @age, [bloodtype] = @bloodtype, [bl" +
                "oodpressure] = @bloodpressure, [vitaminD] = @vitaminD, [Anemia] = @Anemia, [body" +
                "temp] = @bodytemp, [insulin] = @insulin, [additionalinfo] = @additionalinfo, [di" +
                "d_a_surgery] = @did_a_surgery, [allergic_to_any_medicine] = @allergic_to_any_med" +
                "icine, [breathingdisorder] = @breathingdisorder, [taking_any_medicie] = @taking_" +
                "any_medicie, [visit_orthopedic] = @visit_orthopedic, [Asthma] = @Asthma, [choles" +
                "terol] = @cholesterol, [bloodglucose] = @bloodglucose, [Xray] = @Xray, [labresul" +
                "ts] = @labresults, [national_id] = @national_id, [patientname] = @patientname WH" +
                "ERE (([pid] = @Original_pid) AND ([age] = @Original_age) AND ([bloodtype] = @Ori" +
                "ginal_bloodtype) AND ([bloodpressure] = @Original_bloodpressure) AND ([vitaminD]" +
                " = @Original_vitaminD) AND ([Anemia] = @Original_Anemia) AND ([bodytemp] = @Orig" +
                "inal_bodytemp) AND ([insulin] = @Original_insulin) AND ((@IsNull_additionalinfo " +
                "= 1 AND [additionalinfo] IS NULL) OR ([additionalinfo] = @Original_additionalinf" +
                "o)) AND ([did_a_surgery] = @Original_did_a_surgery) AND ([allergic_to_any_medici" +
                "ne] = @Original_allergic_to_any_medicine) AND ([breathingdisorder] = @Original_b" +
                "reathingdisorder) AND ([taking_any_medicie] = @Original_taking_any_medicie) AND " +
                "([visit_orthopedic] = @Original_visit_orthopedic) AND ([Asthma] = @Original_Asth" +
                "ma) AND ([cholesterol] = @Original_cholesterol) AND ([bloodglucose] = @Original_" +
                "bloodglucose) AND ([national_id] = @Original_national_id) AND ([patientname] = @" +
                "Original_patientname));\r\nSELECT pid, age, bloodtype, bloodpressure, vitaminD, An" +
                "emia, bodytemp, insulin, additionalinfo, did_a_surgery, allergic_to_any_medicine" +
                ", breathingdisorder, taking_any_medicie, visit_orthopedic, Asthma, cholesterol, " +
                "bloodglucose, Xray, labresults, national_id, patientname FROM patientmedicalinfo" +
                " WHERE (pid = @pid)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@age", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "age", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bloodtype", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bloodtype", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bloodpressure", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bloodpressure", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@vitaminD", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "vitaminD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Anemia", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Anemia", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bodytemp", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bodytemp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@insulin", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "insulin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@additionalinfo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "additionalinfo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@did_a_surgery", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "did_a_surgery", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@allergic_to_any_medicine", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "allergic_to_any_medicine", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@breathingdisorder", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "breathingdisorder", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@taking_any_medicie", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "taking_any_medicie", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@visit_orthopedic", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "visit_orthopedic", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Asthma", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Asthma", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cholesterol", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cholesterol", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bloodglucose", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bloodglucose", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Xray", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Xray", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@labresults", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "labresults", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@national_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "national_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@patientname", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "patientname", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pid", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_age", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "age", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_bloodtype", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bloodtype", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_bloodpressure", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bloodpressure", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_vitaminD", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "vitaminD", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Anemia", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Anemia", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_bodytemp", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bodytemp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_insulin", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "insulin", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_additionalinfo", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "additionalinfo", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_additionalinfo", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "additionalinfo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_did_a_surgery", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "did_a_surgery", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_allergic_to_any_medicine", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "allergic_to_any_medicine", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_breathingdisorder", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "breathingdisorder", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_taking_any_medicie", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "taking_any_medicie", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_visit_orthopedic", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "visit_orthopedic", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Asthma", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Asthma", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_cholesterol", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cholesterol", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_bloodglucose", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bloodglucose", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_national_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "national_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_patientname", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "patientname", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pid", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "pid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Clinical.Properties.Settings.Default.Orthopedic_DBConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT pid, age, bloodtype, bloodpressure, vitaminD, Anemia, bodytemp, insulin, additionalinfo, did_a_surgery, allergic_to_any_medicine, breathingdisorder, taking_any_medicie, visit_orthopedic, Asthma, cholesterol, bloodglucose, Xray, labresults, national_id, patientname FROM dbo.patientmedicalinfo";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(Orthopedic_DBDataSet3.patientmedicalinfoDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual Orthopedic_DBDataSet3.patientmedicalinfoDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            Orthopedic_DBDataSet3.patientmedicalinfoDataTable dataTable = new Orthopedic_DBDataSet3.patientmedicalinfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Orthopedic_DBDataSet3.patientmedicalinfoDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(Orthopedic_DBDataSet3 dataSet) {
            return this.Adapter.Update(dataSet, "patientmedicalinfo");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_pid, 
                    int Original_age, 
                    string Original_bloodtype, 
                    string Original_bloodpressure, 
                    double Original_vitaminD, 
                    double Original_Anemia, 
                    double Original_bodytemp, 
                    double Original_insulin, 
                    string Original_additionalinfo, 
                    string Original_did_a_surgery, 
                    string Original_allergic_to_any_medicine, 
                    string Original_breathingdisorder, 
                    string Original_taking_any_medicie, 
                    string Original_visit_orthopedic, 
                    string Original_Asthma, 
                    string Original_cholesterol, 
                    string Original_bloodglucose, 
                    int Original_national_id, 
                    string Original_patientname) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_pid));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_age));
            if ((Original_bloodtype == null)) {
                throw new global::System.ArgumentNullException("Original_bloodtype");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_bloodtype));
            }
            if ((Original_bloodpressure == null)) {
                throw new global::System.ArgumentNullException("Original_bloodpressure");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_bloodpressure));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((double)(Original_vitaminD));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((double)(Original_Anemia));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((double)(Original_bodytemp));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((double)(Original_insulin));
            if ((Original_additionalinfo == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_additionalinfo));
            }
            if ((Original_did_a_surgery == null)) {
                throw new global::System.ArgumentNullException("Original_did_a_surgery");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_did_a_surgery));
            }
            if ((Original_allergic_to_any_medicine == null)) {
                throw new global::System.ArgumentNullException("Original_allergic_to_any_medicine");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_allergic_to_any_medicine));
            }
            if ((Original_breathingdisorder == null)) {
                throw new global::System.ArgumentNullException("Original_breathingdisorder");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_breathingdisorder));
            }
            if ((Original_taking_any_medicie == null)) {
                throw new global::System.ArgumentNullException("Original_taking_any_medicie");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_taking_any_medicie));
            }
            if ((Original_visit_orthopedic == null)) {
                throw new global::System.ArgumentNullException("Original_visit_orthopedic");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_visit_orthopedic));
            }
            if ((Original_Asthma == null)) {
                throw new global::System.ArgumentNullException("Original_Asthma");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((string)(Original_Asthma));
            }
            if ((Original_cholesterol == null)) {
                throw new global::System.ArgumentNullException("Original_cholesterol");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_cholesterol));
            }
            if ((Original_bloodglucose == null)) {
                throw new global::System.ArgumentNullException("Original_bloodglucose");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((string)(Original_bloodglucose));
            }
            this.Adapter.DeleteCommand.Parameters[18].Value = ((int)(Original_national_id));
            if ((Original_patientname == null)) {
                throw new global::System.ArgumentNullException("Original_patientname");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((string)(Original_patientname));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    int age, 
                    string bloodtype, 
                    string bloodpressure, 
                    double vitaminD, 
                    double Anemia, 
                    double bodytemp, 
                    double insulin, 
                    string additionalinfo, 
                    string did_a_surgery, 
                    string allergic_to_any_medicine, 
                    string breathingdisorder, 
                    string taking_any_medicie, 
                    string visit_orthopedic, 
                    string Asthma, 
                    string cholesterol, 
                    string bloodglucose, 
                    byte[] Xray, 
                    byte[] labresults, 
                    int national_id, 
                    string patientname) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(age));
            if ((bloodtype == null)) {
                throw new global::System.ArgumentNullException("bloodtype");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(bloodtype));
            }
            if ((bloodpressure == null)) {
                throw new global::System.ArgumentNullException("bloodpressure");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(bloodpressure));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((double)(vitaminD));
            this.Adapter.InsertCommand.Parameters[4].Value = ((double)(Anemia));
            this.Adapter.InsertCommand.Parameters[5].Value = ((double)(bodytemp));
            this.Adapter.InsertCommand.Parameters[6].Value = ((double)(insulin));
            if ((additionalinfo == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(additionalinfo));
            }
            if ((did_a_surgery == null)) {
                throw new global::System.ArgumentNullException("did_a_surgery");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(did_a_surgery));
            }
            if ((allergic_to_any_medicine == null)) {
                throw new global::System.ArgumentNullException("allergic_to_any_medicine");
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(allergic_to_any_medicine));
            }
            if ((breathingdisorder == null)) {
                throw new global::System.ArgumentNullException("breathingdisorder");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(breathingdisorder));
            }
            if ((taking_any_medicie == null)) {
                throw new global::System.ArgumentNullException("taking_any_medicie");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(taking_any_medicie));
            }
            if ((visit_orthopedic == null)) {
                throw new global::System.ArgumentNullException("visit_orthopedic");
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(visit_orthopedic));
            }
            if ((Asthma == null)) {
                throw new global::System.ArgumentNullException("Asthma");
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(Asthma));
            }
            if ((cholesterol == null)) {
                throw new global::System.ArgumentNullException("cholesterol");
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(cholesterol));
            }
            if ((bloodglucose == null)) {
                throw new global::System.ArgumentNullException("bloodglucose");
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(bloodglucose));
            }
            if ((Xray == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((byte[])(Xray));
            }
            if ((labresults == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((byte[])(labresults));
            }
            this.Adapter.InsertCommand.Parameters[18].Value = ((int)(national_id));
            if ((patientname == null)) {
                throw new global::System.ArgumentNullException("patientname");
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(patientname));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int age, 
                    string bloodtype, 
                    string bloodpressure, 
                    double vitaminD, 
                    double Anemia, 
                    double bodytemp, 
                    double insulin, 
                    string additionalinfo, 
                    string did_a_surgery, 
                    string allergic_to_any_medicine, 
                    string breathingdisorder, 
                    string taking_any_medicie, 
                    string visit_orthopedic, 
                    string Asthma, 
                    string cholesterol, 
                    string bloodglucose, 
                    byte[] Xray, 
                    byte[] labresults, 
                    int national_id, 
                    string patientname, 
                    int Original_pid, 
                    int Original_age, 
                    string Original_bloodtype, 
                    string Original_bloodpressure, 
                    double Original_vitaminD, 
                    double Original_Anemia, 
                    double Original_bodytemp, 
                    double Original_insulin, 
                    string Original_additionalinfo, 
                    string Original_did_a_surgery, 
                    string Original_allergic_to_any_medicine, 
                    string Original_breathingdisorder, 
                    string Original_taking_any_medicie, 
                    string Original_visit_orthopedic, 
                    string Original_Asthma, 
                    string Original_cholesterol, 
                    string Original_bloodglucose, 
                    int Original_national_id, 
                    string Original_patientname, 
                    int pid) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(age));
            if ((bloodtype == null)) {
                throw new global::System.ArgumentNullException("bloodtype");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(bloodtype));
            }
            if ((bloodpressure == null)) {
                throw new global::System.ArgumentNullException("bloodpressure");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(bloodpressure));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((double)(vitaminD));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((double)(Anemia));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((double)(bodytemp));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((double)(insulin));
            if ((additionalinfo == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(additionalinfo));
            }
            if ((did_a_surgery == null)) {
                throw new global::System.ArgumentNullException("did_a_surgery");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(did_a_surgery));
            }
            if ((allergic_to_any_medicine == null)) {
                throw new global::System.ArgumentNullException("allergic_to_any_medicine");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(allergic_to_any_medicine));
            }
            if ((breathingdisorder == null)) {
                throw new global::System.ArgumentNullException("breathingdisorder");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(breathingdisorder));
            }
            if ((taking_any_medicie == null)) {
                throw new global::System.ArgumentNullException("taking_any_medicie");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(taking_any_medicie));
            }
            if ((visit_orthopedic == null)) {
                throw new global::System.ArgumentNullException("visit_orthopedic");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(visit_orthopedic));
            }
            if ((Asthma == null)) {
                throw new global::System.ArgumentNullException("Asthma");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Asthma));
            }
            if ((cholesterol == null)) {
                throw new global::System.ArgumentNullException("cholesterol");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(cholesterol));
            }
            if ((bloodglucose == null)) {
                throw new global::System.ArgumentNullException("bloodglucose");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(bloodglucose));
            }
            if ((Xray == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((byte[])(Xray));
            }
            if ((labresults == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((byte[])(labresults));
            }
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(national_id));
            if ((patientname == null)) {
                throw new global::System.ArgumentNullException("patientname");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(patientname));
            }
            this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(Original_pid));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((int)(Original_age));
            if ((Original_bloodtype == null)) {
                throw new global::System.ArgumentNullException("Original_bloodtype");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_bloodtype));
            }
            if ((Original_bloodpressure == null)) {
                throw new global::System.ArgumentNullException("Original_bloodpressure");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_bloodpressure));
            }
            this.Adapter.UpdateCommand.Parameters[24].Value = ((double)(Original_vitaminD));
            this.Adapter.UpdateCommand.Parameters[25].Value = ((double)(Original_Anemia));
            this.Adapter.UpdateCommand.Parameters[26].Value = ((double)(Original_bodytemp));
            this.Adapter.UpdateCommand.Parameters[27].Value = ((double)(Original_insulin));
            if ((Original_additionalinfo == null)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Original_additionalinfo));
            }
            if ((Original_did_a_surgery == null)) {
                throw new global::System.ArgumentNullException("Original_did_a_surgery");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_did_a_surgery));
            }
            if ((Original_allergic_to_any_medicine == null)) {
                throw new global::System.ArgumentNullException("Original_allergic_to_any_medicine");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_allergic_to_any_medicine));
            }
            if ((Original_breathingdisorder == null)) {
                throw new global::System.ArgumentNullException("Original_breathingdisorder");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(Original_breathingdisorder));
            }
            if ((Original_taking_any_medicie == null)) {
                throw new global::System.ArgumentNullException("Original_taking_any_medicie");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(Original_taking_any_medicie));
            }
            if ((Original_visit_orthopedic == null)) {
                throw new global::System.ArgumentNullException("Original_visit_orthopedic");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_visit_orthopedic));
            }
            if ((Original_Asthma == null)) {
                throw new global::System.ArgumentNullException("Original_Asthma");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((string)(Original_Asthma));
            }
            if ((Original_cholesterol == null)) {
                throw new global::System.ArgumentNullException("Original_cholesterol");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(Original_cholesterol));
            }
            if ((Original_bloodglucose == null)) {
                throw new global::System.ArgumentNullException("Original_bloodglucose");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((string)(Original_bloodglucose));
            }
            this.Adapter.UpdateCommand.Parameters[38].Value = ((int)(Original_national_id));
            if ((Original_patientname == null)) {
                throw new global::System.ArgumentNullException("Original_patientname");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((string)(Original_patientname));
            }
            this.Adapter.UpdateCommand.Parameters[40].Value = ((int)(pid));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int age, 
                    string bloodtype, 
                    string bloodpressure, 
                    double vitaminD, 
                    double Anemia, 
                    double bodytemp, 
                    double insulin, 
                    string additionalinfo, 
                    string did_a_surgery, 
                    string allergic_to_any_medicine, 
                    string breathingdisorder, 
                    string taking_any_medicie, 
                    string visit_orthopedic, 
                    string Asthma, 
                    string cholesterol, 
                    string bloodglucose, 
                    byte[] Xray, 
                    byte[] labresults, 
                    int national_id, 
                    string patientname, 
                    int Original_pid, 
                    int Original_age, 
                    string Original_bloodtype, 
                    string Original_bloodpressure, 
                    double Original_vitaminD, 
                    double Original_Anemia, 
                    double Original_bodytemp, 
                    double Original_insulin, 
                    string Original_additionalinfo, 
                    string Original_did_a_surgery, 
                    string Original_allergic_to_any_medicine, 
                    string Original_breathingdisorder, 
                    string Original_taking_any_medicie, 
                    string Original_visit_orthopedic, 
                    string Original_Asthma, 
                    string Original_cholesterol, 
                    string Original_bloodglucose, 
                    int Original_national_id, 
                    string Original_patientname) {
            return this.Update(age, bloodtype, bloodpressure, vitaminD, Anemia, bodytemp, insulin, additionalinfo, did_a_surgery, allergic_to_any_medicine, breathingdisorder, taking_any_medicie, visit_orthopedic, Asthma, cholesterol, bloodglucose, Xray, labresults, national_id, patientname, Original_pid, Original_age, Original_bloodtype, Original_bloodpressure, Original_vitaminD, Original_Anemia, Original_bodytemp, Original_insulin, Original_additionalinfo, Original_did_a_surgery, Original_allergic_to_any_medicine, Original_breathingdisorder, Original_taking_any_medicie, Original_visit_orthopedic, Original_Asthma, Original_cholesterol, Original_bloodglucose, Original_national_id, Original_patientname, Original_pid);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private patientmedicalinfoTableAdapter _patientmedicalinfoTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public patientmedicalinfoTableAdapter patientmedicalinfoTableAdapter {
            get {
                return this._patientmedicalinfoTableAdapter;
            }
            set {
                this._patientmedicalinfoTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._patientmedicalinfoTableAdapter != null) 
                            && (this._patientmedicalinfoTableAdapter.Connection != null))) {
                    return this._patientmedicalinfoTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._patientmedicalinfoTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateUpdatedRows(Orthopedic_DBDataSet3 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._patientmedicalinfoTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.patientmedicalinfo.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._patientmedicalinfoTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateInsertedRows(Orthopedic_DBDataSet3 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._patientmedicalinfoTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.patientmedicalinfo.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._patientmedicalinfoTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateDeletedRows(Orthopedic_DBDataSet3 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._patientmedicalinfoTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.patientmedicalinfo.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._patientmedicalinfoTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public virtual int UpdateAll(Orthopedic_DBDataSet3 dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._patientmedicalinfoTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._patientmedicalinfoTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._patientmedicalinfoTableAdapter != null)) {
                    revertConnections.Add(this._patientmedicalinfoTableAdapter, this._patientmedicalinfoTableAdapter.Connection);
                    this._patientmedicalinfoTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._patientmedicalinfoTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._patientmedicalinfoTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._patientmedicalinfoTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._patientmedicalinfoTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._patientmedicalinfoTableAdapter != null)) {
                    this._patientmedicalinfoTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._patientmedicalinfoTableAdapter]));
                    this._patientmedicalinfoTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591